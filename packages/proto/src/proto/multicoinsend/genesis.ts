// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: multicoinsend/genesis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./params";
import * as pb_1 from "google-protobuf";
export namespace hupayxcom.multicoinsend.multicoinsend {
    export class GenesisState extends pb_1.Message {
        #one_of_decls = [];
        constructor(data?: any[] | {
            params?: dependency_2.hupayxcom.multicoinsend.multicoinsend.Params;
            accounts?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_2.hupayxcom.multicoinsend.multicoinsend.Params, 1) as dependency_2.hupayxcom.multicoinsend.multicoinsend.Params;
        }
        set params(value: dependency_2.hupayxcom.multicoinsend.multicoinsend.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get accounts() {
            return pb_1.Message.getField(this, 2) as string[];
        }
        set accounts(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_2.hupayxcom.multicoinsend.multicoinsend.Params.prototype.toObject>;
            accounts?: string[];
        }) {
            const message = new GenesisState({});
            if (data.params != null) {
                message.params = dependency_2.hupayxcom.multicoinsend.multicoinsend.Params.fromObject(data.params);
            }
            if (data.accounts != null) {
                message.accounts = data.accounts;
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_2.hupayxcom.multicoinsend.multicoinsend.Params.prototype.toObject>;
                accounts?: string[];
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            if (this.accounts != null) {
                data.accounts = this.accounts;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.params !== undefined)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (this.accounts !== undefined)
                writer.writeRepeatedString(2, this.accounts);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_2.hupayxcom.multicoinsend.multicoinsend.Params.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisState {
            return GenesisState.deserialize(bytes);
        }
    }
}
